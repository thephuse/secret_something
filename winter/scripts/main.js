var resize = function() {
  var minMargin = 50;
  var $wrapper = $('.content-wrapper:visible');
  var $content = $wrapper.find('.content').css({
    'margin-top': 0,
    'margin-bottom': 0
  });
  var contentWrapperHeight = $wrapper.height();
  var contentHeight = $content.height();  
  var margin = (contentWrapperHeight - contentHeight)/2;
  margin = margin < minMargin ? minMargin : margin;
  $content.css({
    'margin-top': margin + 'px',
    'margin-bottom': margin + 'px'
  });
};


// Class to represent a member of the secret something
function Member(name, email) {
  var self = this;
  self.name = ko.observable(name);
  self.email = ko.observable(email);
};

// Main functions
function ViewModel() {
  var self = this;

  // Editable Data
  self.eventDate = ko.observable("");

  self.niceEventDate = ko.computed(function() {
    var datestring = self.eventDate();
    var d = new Date(datestring);
    var monthNames = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
    var currDate = d.getDate();
    var sup = "";
    if (currDate == 1 || currDate == 21 || currDate ==31){
      sup = "st"; }
    else if (currDate == 2 || currDate == 22){
      sup = "nd"; }
    else if (currDate == 3 || currDate == 23){
      sup = "rd"; }
    else {
      sup = "th"; }
    
    var niceDate = monthNames[d.getMonth()] + " " + currDate + "<sup>" + sup + "</sup>, " + d.getFullYear();
      return niceDate;
    });

  self.eventTitle = ko.observable("");
  self.hostName = ko.observable("");
  self.hostEmail = ko.observable("");
  self.description = ko.observable("");
  self.members = ko.observableArray();

  // add organizer to participants array once they've input their info
  if(self.hostName !== '' && self.hostEmail !== ''){
    self.members = ko.observableArray([
      { name: self.hostName, email: self.hostEmail}
    ]);
  }


  // Operations
  self.addMember = function () {
    self.members.push(new Member($('#memberName').val(), $('#memberEmail').val()));
    $('#memberName').val('');
    $('#memberEmail').val('');
    resize();
  };
  self.removeMember = function (member) {
    //console.log("member: ", member);
    self.members.remove(member);
    resize();
  };

};

ko.applyBindings(new ViewModel());

  $(window).resize(function () {
    resize();
  });

//
$(function () {
  resize();

  $('.next').click(function (e) {
    e.preventDefault();
    if (!$(this).hasClass('disabled'))
    {
      $(this).parents('section').hide().next().show();
      resize();
    }
  });

  //wrap next button link text in span. done via js to get around text generated by knockout
  $('a.btn.next').contents().wrap('<span/>');

  //datepicker
  $('#datepicker2 input').datepicker().on('changeDate', function (ev) {
    $('#date-daily2').change();
  });
  $('#date-daily2').on('change', function () {
    $('#date-daily2').val();
    $( "#date-daily2" ).datepicker("hide");
  });

  $('.add').click(function(){
      $(this).parents('section').find('.next').wrapInner('<span/>')
  });

  //EMAIL VALIDATION VARIABLE
  var testEmail = /^[A-Z0-9._%+-]+@([A-Z0-9-]+\.)+[A-Z]{2,4}$/i;

  //VALIDATION CHECKS
  $('#start-form > *').on(("change", "keyup"), function(){
    if($('.eventTitle').val() !== '' && $('.hostName').val() !== '' && $('#date-daily2').val() !== '' && $('.eventDescription').val() !== '' && testEmail.test($('.hostEmail').val())) {
      $('.form .btn.next').removeClass('disabled');
    } else {
      if($('.form .btn.next:not(.disabled)')) {
        //otherwise set it as disabled
        $('.form .btn.next').addClass('disabled');
      }
    }
  });


  $('#participants-form > *').on(("change", "keyup"), function(){
    if($('#memberName').val() !== '' && testEmail.test($('#memberEmail').val())) {
      $('#memberEmail').removeClass('disabled');
    } else {
      $('#memberEmail').addClass('disabled');
    }
  });
  $('#participants-form .btn.add').click(function(){
    $('#memberEmail').addClass('disabled');
  });


  var names = ["Sean","Kyle","Emily","Nick","Cotter","Brian","Jeremy","Kimmy","Pat","Johnny"];

  var arr1 = names.slice(), // copy array
      arr2 = names.slice(); // copy array again

  arr1.sort(function() { return 0.5 - Math.random();}); // shuffle arrays
  arr2.sort(function() { return 0.5 - Math.random();});

  while (arr1.length) {
      var name1 = arr1.pop(), // get the last value of arr1
          name2 = arr2[0] == name1 ? arr2.pop() : arr2.shift();
          //        ^^ if the first value is the same as name1, 
          //           get the last value, otherwise get the first

      console.log(name1 + ' gets ' + name2);
  }

});
